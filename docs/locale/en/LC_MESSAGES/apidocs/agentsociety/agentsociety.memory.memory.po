# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, FIBLAB
# This file is distributed under the same license as the AgentSociety
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AgentSociety 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-05 00:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:1
#, python-brace-format
msgid "{py:mod}`agentsociety.memory.memory`"
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:10
msgid "Module Contents"
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:12
msgid "Classes"
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:18
#, python-brace-format
msgid "{py:obj}`KVMemory <agentsociety.memory.memory.KVMemory>`"
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:22
#, python-brace-format
msgid "{py:obj}`MemoryNode <agentsociety.memory.memory.MemoryNode>`"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:24
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:140
msgid "A data class representing a memory node."
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:26
#, python-brace-format
msgid "{py:obj}`StreamMemory <agentsociety.memory.memory.StreamMemory>`"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:28
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:225
msgid "A class used to store and manage time-ordered stream information."
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:30
#, python-brace-format
msgid "{py:obj}`Memory <agentsociety.memory.memory.Memory>`"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:32
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:311
msgid "A class to manage different types of memory (status and stream)."
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:36
msgid "Data"
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:42
#, python-brace-format
msgid "{py:obj}`__all__ <agentsociety.memory.memory.__all__>`"
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:48
msgid "API"
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:54
msgid "['KVMemory', 'StreamMemory', 'Memory']"
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:67
#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:227
#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:313
msgid "Initialization"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:71
msgid "Initialize the KVMemory with a unified memory configuration."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:73
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:98
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:115
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:124
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:233
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:241
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:250
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:259
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:277
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:286
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:295
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:319
msgid "**Args**:"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:74
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:322
msgid "`memory_config` (MemoryConfig): The unified memory configuration."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:75
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:236
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:321
msgid "`embedding` (SparseTextEmbedding): The embedding object."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:79
msgid "Initialize embeddings for all fields that require them."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:87
msgid "Generate semantic text for a given key and value."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:96
msgid "Search for relevant memories based on the provided query."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:99
msgid "`query` (str): The text query to search for."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:100
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:280
msgid ""
"`top_k` (int, optional): Number of top relevant memories to return. "
"Defaults to 3."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:101
msgid ""
"`filter` (Optional[dict], optional): Additional filters for the search. "
"Defaults to None."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:103
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:119
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:245
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:253
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:262
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:284
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:291
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:304
msgid "**Returns**:"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:104
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:285
msgid "`str`: Formatted string of the search results."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:113
msgid "Retrieve a value from the memory."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:116
msgid "`key` (Any): The key to retrieve."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:117
msgid ""
"`default_value` (Optional[Any], optional): Default value if the key is "
"not found. Defaults to None."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:120
msgid "`Any`: The retrieved value or the default value if the key is not found."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:122
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:129
msgid "**Raises**:"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:123
msgid ""
"`KeyError`: If the key is not found in any of the memory sections and no "
"default value is provided."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:122
msgid "Update a value in the memory and refresh embeddings if necessary."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:125
msgid "`key` (Any): The key to update."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:126
msgid "`value` (Any): The new value to set."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:127
msgid ""
"`mode` (Union[Literal[\"replace\"], Literal[\"merge\"]], optional): "
"Update mode. Defaults to \"replace\"."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:130
msgid "`ValueError`: If an invalid update mode is provided."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:131
msgid "`KeyError`: If the key is not found in any of the memory sections."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:131
msgid "Export the memory of a given keys."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:142
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:227
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:313
msgid "**Attributes**:"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:143
msgid "`topic`: The topic associated with the memory node."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:144
msgid "`day`: Day of the event or memory."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:145
msgid "`t`: Time stamp or order."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:146
msgid "`location`: Location where the event occurred."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:147
msgid "`description`: Description of the memory."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:148
msgid "`cognition_id`: ID related to cognitive memory (optional)."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:149
msgid "`id`: Unique ID for this memory node (optional)."
msgstr ""

#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:147
#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:158
#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:169
#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:180
#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:191
#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:202
#: ../../apidocs/agentsociety/agentsociety.memory.memory.md:213
msgid "None"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:228
msgid "`_memories`: A deque to store memory nodes with a maximum length limit."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:229
msgid ""
"`_memory_id_counter`: An internal counter to generate unique IDs for each"
" new memory node."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:230
msgid "`_vectorstore`: The Faiss query object for search functionality."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:231
msgid "`_status_memory`: The status memory object."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:232
msgid "`_environment`: The environment object."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:231
msgid "Initialize an instance of StreamMemory."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:234
#: ../../../packages/agentsociety/agentsociety/memory/memory.py:320
msgid "`environment` (Environment): The environment object."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:235
msgid "`status_memory` (KVMemory): The status memory object."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:237
msgid "`max_len` (int): Maximum length of the deque. Default is 1000."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:239
msgid ""
"A generic method for adding a memory node and returning the memory node "
"ID."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:242
msgid "`topic` (str): The topic associated with the memory node."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:243
msgid "`description` (str): Description of the memory."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:246
msgid "`int`: The unique ID of the newly added memory node."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:248
msgid "Retrieve the related cognition memory node by its ID."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:251
msgid "`memory_id` (int): The ID of the memory to find related cognition for."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:254
msgid ""
"`Optional[MemoryNode]`: The related cognition memory node, if found; "
"otherwise, None."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:257
msgid "Format a list of memory nodes into a readable string representation."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:260
msgid "`memories` (list[MemoryNode]): List of MemoryNode objects to format."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:263
msgid "`str`: A formatted string containing the details of each memory node."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:266
msgid "Retrieve memories by specified IDs"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:275
msgid "Search stream memory with optional filters and return formatted results."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:278
msgid "`query` (str): The text to use for searching."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:279
msgid ""
"`topic` (Optional[str], optional): Filter memories by this topic. "
"Defaults to None."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:281
msgid ""
"`day_range` (Optional[tuple[int, int]], optional): Tuple of start and end"
" days for filtering. Defaults to None."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:282
msgid ""
"`time_range` (Optional[tuple[int, int]], optional): Tuple of start and "
"end times for filtering. Defaults to None."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:284
msgid "Search all memory events from today"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:287
msgid ""
"`query` (`str`): Optional query text, returns all memories of the day if "
"empty. Defaults to \"\"."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:288
msgid ""
"`topic` (`Optional[str]`): Optional memory topic for filtering specific "
"types of memories. Defaults to None."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:289
msgid ""
"`top_k` (`int`): Number of most relevant memories to return. Defaults to "
"100."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:292
msgid "`str`: Formatted text of today's memories."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:293
msgid "Add cognition to existing memory nodes."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:296
msgid ""
"`memory_ids` (list[int]): List of IDs of the memories to which cognition "
"will be added."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:297
msgid "`cognition` (str): Description of the cognition to add."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:302
msgid "Retrieve all stream memory nodes as dictionaries."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:305
msgid "`list[dict]`: List of all memory nodes as dictionaries."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:314
msgid "`_status` (`KVMemory`): Stores status-related data."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:315
msgid "`_stream` (`StreamMemory`): Stores stream-related data."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:317
msgid "Initializes the Memory with a unified memory configuration."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:343
msgid "Initialize embeddings within the status memory."
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:345
msgid "**Description**:"
msgstr ""

#: ../../../packages/agentsociety/agentsociety/memory/memory.py:346
msgid ""
"Asynchronously initializes embeddings for the status memory component, "
"which prepares the system for performing searches."
msgstr ""

